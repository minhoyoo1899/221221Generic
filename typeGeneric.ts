function GenericExample<AfterDecisionType>(params: AfterDecisionType): AfterDecisionType {
  console.log("이것은 GenericType의 검사를 통과한 실행 부분입니다. ->", params);
  return params;
}

const first = GenericExample<string>("Hello World");
const second = GenericExample<number>(1234);
const third = GenericExample<boolean>(true);


/*
* 제네릭이라는 작성법은 자바스크립트 유저에게는 낯설은 단어이지만, 객체지향언어에서는 붕어빵의 슈크림처럼 흔하게 사용하는 작성법입니다. 특히 "정적타입명시", 타입을 미리 지정하는 언어들에게는 유연함과 가독성, 안정성까지 모두 해결 할 수 있기 때문에 함수를 많이 사용하는 자바스크립트 유저에게는 더할나위 없이 고마운 작성법입니다.

* "같은 실행이 필요한 함수인데 입출력 타입만 바뀌어야 한다면" 

* 이라는 명제가 붙는 것이 제네릭 작성법의 핵심입니다. 본 예제는 알아보기 편하게끔 기본 데이터타입의 예를 보여주고 있지만,
* interface와 응용한다면, 무궁무진한 '정규화' 작업을 해낼 수 있습니다. GO언어의 경우 처음엔 제네릭을 지원하지 않았다가, 유저들에게 뭇매를 맞고 업데이트 할만큼, 매우 인기가 많고 그 코드패턴이 오랜시간 안착되어있습니다. 아마도 기성 개발자선배가 자바스크립트 쓰는데 제네릭을 사용한다는 이야기를 들으면 어떤표정일지 놀랄만큼 중요한 위치에 있습니다. 이는 자바스크립트 유저가 타입스크립트를 접하게 된 후 습관이 붙은 나중에서야 배우게 된다는 점에서 중요성이 일축될 여지가 많지만, 객체에서 빼놓을 수 없는 것이 생성자 함수와 인스턴스 인것처럼 함께 맞물려 가는 주요 개념입니다.

* 함수 사용하는 것에 인터페이스 문법만으로 답답함이 느껴졌다면, 제네릭 작성법을 검토하고 도입하여 타입스크립트의 활용수준을 한층 더 끌어 올리시기 바랍니다.
*/

